/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_net_NetClient */

#ifndef _Included_com_net_NetClient
#define _Included_com_net_NetClient
#include <linux/genetlink.h>
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_net_NetClient
 * Method:    open
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_net_NetClient_open
  (JNIEnv *, jclass);

/*
 * Class:     com_net_NetClient
 * Method:    reset
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_net_NetClient_reset
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_net_NetClient
 * Method:    setnum
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_com_net_NetClient_setnum
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_net_NetClient
 * Method:    receive
 * Signature: (I)Lcom/net/Message;
 */
JNIEXPORT jobject JNICALL Java_com_net_NetClient_receive
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_net_NetClient
 * Method:    send
 * Signature: (ILcom/net/Message;)V
 */
JNIEXPORT void JNICALL Java_com_net_NetClient_send
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     NetClient
 * Method:    set
 * Signature: (IILcom/net/NetType;)I
 */
JNIEXPORT jint JNICALL Java_com_net_NetClient_set
  (JNIEnv *, jclass, jint, jint, jobject);

/*
 * Class:     com_net_NetClient
 * Method:    close
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_net_NetClient_close
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif

#define MAX_BUF_SIZE 2000
#define NAME "CG"

#define GENLMSG_DATA(glh) ((void *)((char *)NLMSG_DATA(glh) + GENL_HDRLEN))
#define NLA_DATA(na)      ((void *)((char *)(na) + NLA_HDRLEN))

enum attrs {
        CG_ATTR_UNSPEC,
        CG_ATTR_PID,
        CG_ATTR_DEVNUM,
        CG_ATTR_PACKET,
        CG_ATTR_ADDR,
        CG_ATTR_VALID,
        CG_ATTR_RATIO,
        __CG_ATTR_MAX,
};

#define CG_ATTR_MAX (__CG_ATTR_MAX - 1)

enum commands {
        CG_CMD_UNSPEC,
        CG_CMD_PID,
        CG_CMD_PACKET,
        __CG_CMD_MAX,
};

#define CG_CMD_MAX (__CG_CMD_MAX - 1)

struct packet {
	__u32 id;
	__u32 ifindex;
	__u16 len;
	__u16 sid;
	__u16 did;
	bool enc;
	unsigned char data[MAX_BUF_SIZE];
};

struct netable {
	__u32 id;
	__u16 idx;
	__u32 addr;
	__u32 ratio;
	bool local;
	bool valid;
};

typedef struct nlmsg {
	struct nlmsghdr n;
	struct genlmsghdr g;
	struct packet pack;
} nlmsg;

#endif
